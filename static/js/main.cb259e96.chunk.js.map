{"version":3,"sources":["containers/ApplicationPage/actions.js","containers/ApplicationPage/reducers.js","reducers/index.js","routes/history.js","containers/ApplicationPage/Loadable.js","containers/LoginPage/Loadable.js","routes/index.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["SET_MESSAGE","setMessageSuccess","message","type","payload","setMessage","dispatch","a","initialState","application","state","action","Object","assign","rootReducer","combineReducers","applicationPage","createBrowserHistory","basename","process","Loadable","loader","loading","browserHistory","listen","arg","window","scrollTo","history","exact","path","render","to","component","ApplicationPage","LoginPage","Boolean","location","hostname","match","Sentry","dsn","environment","document","body","oncontextmenu","e","preventDefault","store","createStoreWithMiddleware","applyMiddleware","thunk","createStore","compose","configureStore","ReactDOM","routes","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAAaA,EAAc,cAErBC,EAAoB,SAACC,GAC1B,MAAO,CACNC,KAAMH,EACNI,QAAS,CACRF,aAKUG,EAAa,SAACH,GAC1B,8CAAO,WAAMI,GAAN,SAAAC,EAAA,sDACND,EAASL,EAAkBC,IADrB,2CAAP,mDAAM,K,kLCRDM,EAAe,CACpBN,QAAS,SAgBKO,EAbK,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACrD,OAAQA,EAAOR,MACd,KAAKH,cACJ,OAAOY,OAAOC,OAAO,GAAIH,EAAO,CAC/BR,QAASS,EAAOP,QAAQF,UAG1B,QACC,OAAOQ,ICRKI,EAJKC,0BAAgB,CACnCC,oB,yBCJcC,cAAqB,CAAEC,SAAUC,sB,iBCCjCC,MAAS,CACvBC,OAAQ,kBAAM,oDACdC,QAAS,kBAAM,QCFDF,MAAS,CACvBC,OAAQ,kBAAM,oDACdC,QAAS,kBAAM,QCQhBC,EAAeC,QAAO,SAAAC,GAHrBC,OAAOC,SAAS,EAAG,MAQnB,wBAAC,IAAD,CAAQC,QAASL,GAChB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,aACjD,kBAAC,IAAD,CAAOF,KAAK,QAAQG,UAAWC,IAC/B,kBAAC,IAAD,CAAOJ,KAAK,SAASG,UAAWE,MCTfC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2D,MCPNC,IAAY,CACVC,IAAK,6DACLC,YAAavB,eAIfwB,SAASC,KAAKC,cAAgB,SAACC,GAC9BA,EAAEC,kBAGH,IAAIC,EChBW,WACd,IAAMC,EAA4BC,0BAAgBC,KASlD,OARYC,sBAAYtC,EAAauC,kBAAQJ,IDclCK,GAEZC,IAASxB,OACR,kBAAC,IAAD,CAAUiB,MAAOA,GACbQ,GAEJb,SAASc,eAAe,SDsGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cb259e96.chunk.js","sourcesContent":["export const SET_MESSAGE = 'SET_MESSAGE'\n\nconst setMessageSuccess = (message) => {\n\treturn {\n\t\ttype: SET_MESSAGE,\n\t\tpayload: {\n\t\t\tmessage\n\t\t}\n\t}\n}\n\nexport const setMessage = (message) => {\n\treturn async dispatch => {\n\t\tdispatch(setMessageSuccess(message))\n\t}\n}\n","import {\n\tSET_MESSAGE,\n} from './actions'\n\nconst initialState = {\n\tmessage: \"hello\"\n}\n\nconst application = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase SET_MESSAGE: {\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tmessage: action.payload.message\n\t\t\t})\n\t\t}\n\t\tdefault: {\n\t\t\treturn state\n\t\t}\n\t}\n}\n\nexport default application\n","import { combineReducers } from 'redux'\n\nimport applicationPage from '../containers/ApplicationPage/reducers'\n\nconst rootReducer = combineReducers({\n\tapplicationPage,\n})\n\nexport default rootReducer\n","import {createBrowserHistory} from 'history'\nexport default createBrowserHistory({ basename: process.env.PUBLIC_URL })\n","import Loadable from 'react-loadable'\n\nexport default Loadable({\n\tloader: () => import('./index'),\n\tloading: () => null\n})\n","import Loadable from 'react-loadable'\n\nexport default Loadable({\n\tloader: () => import('./index'),\n\tloading: () => null\n})\n","import React from 'react'\nimport { Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport browserHistory from './history'\n\nimport ApplicationPage from '../containers/ApplicationPage/Loadable'\nimport LoginPage from '../containers/LoginPage/Loadable'\n\nconst handleRouteChanged = arg => {\n\twindow.scrollTo(0, 0)\n}\n\nbrowserHistory.listen(arg => {\n\thandleRouteChanged(arg)\n})\n\nexport default (\n\t<Router history={browserHistory}>\n\t\t<Switch>\n\t\t\t<Route exact path='/' render={() => <Redirect to='/home' />} />\n\t\t\t<Route path='/home' component={ApplicationPage} />\n\t\t\t<Route path='/login' component={LoginPage} />\n\t\t</Switch>\n\t</Router>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport * as Sentry from '@sentry/browser';\n\nimport configureStore from './store/configureStore'\nimport routes from './routes'\nimport * as serviceWorker from './serviceWorker';\n\nimport './global-style.scss'\n\nSentry.init({\n  dsn: \"https://6defb5c19cbc4fbe80013fd960e983f1@sentry.io/1763246\",\n  environment: process.env.NODE_ENV,\n});\n\n\ndocument.body.oncontextmenu = (e) => {\n\te.preventDefault()\n}\n\nlet store = configureStore()\n\nReactDOM.render(\n\t<Provider store={store}>\n    {routes}\n  </Provider>,\n\tdocument.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nexport default function configureStore() {\n\tconst createStoreWithMiddleware = applyMiddleware(thunk)\n\tlet store = createStore(rootReducer, compose(createStoreWithMiddleware))\n\tif (process.env.NODE_ENV === 'development') {\n\t\tstore = createStore(\n\t\t\trootReducer,\n\t\t\tcomposeWithDevTools(createStoreWithMiddleware)\n\t\t)\n\t}\n\n\treturn store\n}\n"],"sourceRoot":""}